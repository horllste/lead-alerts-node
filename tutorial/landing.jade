.chapter(data-title='Displaying the Landing Page')
  .step(data-title='Landing Page Data', 
    data-file='controllers/router.js', data-highlight='7-15')
    :markdown
      ## Landing Page Data

      To display a landing page for our house, we'll first need some data about the fictional house we've put on the market. For demonstration purposes, we've hard-coded a JavaScript object literal containing information we need.

  .step(data-title='Configuring The Route', 
    data-file='controllers/router.js', data-highlight='19-22')
    :markdown
      ## Configuring The Route

      Here we create a route handler for the root URL of our application, which will serve as the landing page for our home. We render a Jade template, passing in the data about the house to use inside the template.

      Let's take a look at the Jade code which renders the page.

  .step(data-title='Rendering the Landing Page', 
    data-file='views/index.jade')
    :markdown
      ## Rendering the Landing Page

      In our Jade template, we insert data about the house, and in a sidebar include a form for the user to enter in their contact information to request more info about the home.

      The form is actually not going to be submitted directly when the button is clicked - we'll handle that piece via JavaScript to avoid a page refresh. Let's check out that code next.

  .step(data-title='Submitting the Form', 
    data-file='public/form.js')
    :markdown
      ## Submitting the Form

      On our landing page, we include this JavaScript code to intercept the form submission event, and submit the form via Ajax. We do this to avoid a page turn, keeping the user on our landing page.  On either a success or error response from the `/leads` resource, we show an alert message indicating whether or not the request was received successfully.

      Now that we've seen how the front end code for our landing page works, let's see what happens on the server when we send that `POST` request to `/leads`.